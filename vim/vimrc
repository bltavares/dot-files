set encoding=utf-8

" Enforce leader to be the default
let mapleader = "\\"
let maplocalleader = mapleader

call plug#begin()
Plug 'altercation/vim-colors-solarized'
Plug 'bling/vim-airline'
Plug 'duganchen/vim-soy', { 'for': 'soy' }
Plug 'godlygeek/Tabular', { 'on': 'Tabularize' }
Plug 'jpalardy/vim-slime'
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
Plug 'kien/ctrlp.vim'
Plug 'kien/rainbow_parentheses.vim'
Plug 'majutsushi/tagbar'
Plug 'myusuf3/numbers.vim'
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'rodjek/vim-puppet', { 'for': 'puppet' }
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree', { 'on': ['NERDtree', 'NERDTreeFind', 'NERDTreeToggle'] }
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
Plug 'tpope/vim-fugitive', { 'on': ['GBlame'] }
Plug 'tpope/vim-markdown', { 'for': 'markdown' }
Plug 'tpope/vim-surround'
Plug 'vim-scripts/paredit.vim'
Plug 'wting/rust.vim', { 'for': 'rust' }
call plug#end()

set nocompatible  " We don't want vi compatibility.
set hidden
set showcmd     "show incomplete cmds down the bottom
set showmode    "show current mode down the bottom
set incsearch   "find the next match as we type the search
set hlsearch    "hilight searches by default
if has("wildmenu")
  set wildmenu
  set wim=longest:full,full
endif

" alt+n or alt+p to navigate between entries in QuickFix
map <silent> <m-p> :cp <cr>
map <silent> <m-n> :cn <cr>
set cf  " Enable error files & error jumping.

set history=256  " Number of things to remember in history.
set autowrite  " Writes on make/shell commands
set ruler  " Ruler on
set nu  " Line numbers on
set nowrap  " Line wrapping off
set timeoutlen=500  " Time to wait after ESC (default causes an annoying delay)

"colorscheme railscasts2 " Uncomment this to set a default theme
"colorscheme jellybeans 

" Formatting (some of these are for coding in C and C++)
set ts=2  " Tabs are 2 spaces
set bs=2  " Backspace over everything in insert mode
set shiftwidth=2  " Tabs under smart indent
set smarttab
set expandtab
set cinoptions=:0,p0,t0
set cinwords=if,else,while,do,for,switch,case
set formatoptions=tcqr
set cindent
set autoindent

" Visual
set showmatch  " Show matching brackets.
set mat=5  " Bracket blinking.
set list

" Show $ at end of line and trailing space as ~
set lcs=tab:\ \ ,eol:$,trail:~,extends:>,precedes:<
set showbreak=â†ª
set novisualbell  " No blinking .
set noerrorbells  " No noise.
set laststatus=2  " Always show status line.

" gvim specific
set mousehide  " Hide mouse after chars typed
set mouse=a  " Mouse in all modes
"set ttymouse=xterm2

" Syntax
au! BufRead,BufNewFile *.haml         setfiletype haml

set background=dark
let g:solarized_termtrans=1
colors solarized

"folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default

if has('gui_running')
  set guioptions-=T           " remove the toolbar
  set lines=40                " 40 lines of text instead of 24,
endif

" NERDtree map
silent! nmap <silent> <Leader>p :NERDTreeToggle<CR>
silent! nmap <silent> <Leader>o :NERDTreeFind<CR>

"Ctrlp buffer
nnoremap <leader>b :CtrlPBuffer<cr>
nnoremap <leader>t :CtrlPTag<cr>
nnoremap <leader>f :CtrlP<cr>
let g:ctrlp_max_files = 0


"mark syntax errors with :signs
let g:syntastic_enable_signs=1

" Removing backup clutter
set backupdir=~/.vim/backup,/tmp
set dir=~/.vim/backup,/tmp

" Slim and Tmux
let g:slime_target = "tmux"

" Numbers.vim
nnoremap <F3> :NumbersToggle<CR>

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Rainbown parentheses 4evah
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
" We need to reset parentheses when we change the color
au ColorScheme * RainbowParenthesesToggle
au ColorScheme * RainbowParenthesesToggle

"Paredit for el
au BufNewFile,BufRead *.el call PareditInitBuffer()
au BufNewFile,BufRead *.ls call PareditInitBuffer()

"Tagbar
nnoremap <leader>n :TagbarToggle<cr>
let g:tagbar_type_ruby = {
      \ 'kinds' : [
      \ 'm:modules',
      \ 'c:classes',
      \ 'd:describes',
      \ 'C:contexts',
      \ 'f:methods',
      \ 'F:singleton methods'
      \ ]
      \ }
let g:tagbar_type_clojure = {
      \ 'ctagstype': 'clojure',
      \ 'kinds' : [
      \ 'n:namespace' ,
      \ 'd:definition' ,
      \ 'f:function' ,
      \ 'm:macro' ,
      \ 'i:inline' ,
      \ 'a:multimethod definition' ,
      \ 'b:multimethod implementation' ,
      \ 'c:defonce' ,
      \ 's:struct' ,
      \ 'v:intern' ,
      \]
      \ }
let g:tagbar_type_puppet = {
      \ 'ctagstype': 'puppet',
      \ 'kinds': [
      \'c:class',
      \'s:site',
      \'n:node',
      \'d:definition'
      \]
      \}
let g:tagbar_type_markdown = {
      \ 'ctagstype' : 'markdown',
      \ 'kinds' : [
      \ 'h:Heading_L1',
      \ 'i:Heading_L2',
      \ 'k:Heading_L3'
      \ ]
      \ }

" airline
let g:airline_left_sep='|'
let g:airline_right_sep='|'
