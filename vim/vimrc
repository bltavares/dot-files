set encoding=utf-8

let mapleader = "\\"
let maplocalleader = mapleader

"Pathogen
runtime bundle/pathogen/autoload/pathogen.vim
call pathogen#infect()

filetype on  " Automatically detect file types.
syntax on
filetype plugin on
filetype indent on
filetype plugin indent on

" Stupid shift key fixes
cmap W w
cmap WQ wq
cmap wQ wq
cmap Q q

set nocompatible  " We don't want vi compatibility.
set hidden
set showcmd     "show incomplete cmds down the bottom
set showmode    "show current mode down the bottom
set incsearch   "find the next match as we type the search
set hlsearch    "hilight searches by default
if has("wildmenu")
  set wildmenu
  set wim=longest:full,full
endif

" Change which file opens after executing :Rails command
let g:rails_default_file='config/database.yml'

" alt+n or alt+p to navigate between entries in QuickFix
map <silent> <m-p> :cp <cr>
map <silent> <m-n> :cn <cr>
set cf  " Enable error files & error jumping.

set history=256  " Number of things to remember in history.
set autowrite  " Writes on make/shell commands
set ruler  " Ruler on
set nu  " Line numbers on
set nowrap  " Line wrapping off
set timeoutlen=500  " Time to wait after ESC (default causes an annoying delay)

"colorscheme railscasts2 " Uncomment this to set a default theme
"colorscheme jellybeans 

" Formatting (some of these are for coding in C and C++)
set ts=2  " Tabs are 2 spaces
set bs=2  " Backspace over everything in insert mode
set shiftwidth=2  " Tabs under smart indent
set smarttab
set expandtab
set cinoptions=:0,p0,t0
set cinwords=if,else,while,do,for,switch,case
set formatoptions=tcqr
set cindent
set autoindent

" Visual
set showmatch  " Show matching brackets.
set mat=5  " Bracket blinking.
set list

" Show $ at end of line and trailing space as ~
set lcs=tab:\ \ ,eol:$,trail:~,extends:>,precedes:<
set showbreak=â†ª
set novisualbell  " No blinking .
set noerrorbells  " No noise.
set laststatus=2  " Always show status line.

" gvim specific
set mousehide  " Hide mouse after chars typed
set mouse=a  " Mouse in all modes
"set ttymouse=xterm2

" Syntax
au! BufRead,BufNewFile *.haml         setfiletype haml

" IMPORTANT: Uncomment one of the following lines to force
" using 256 colors (or 88 colors) if your terminal supports it,
" but does not automatically use 256 colors by default.
"set t_Co=256
"set t_Co=88
"if (&t_Co == 256 || &t_Co == 88) && !has('gui_running') &&
      \ filereadable(expand("$HOME/.vim/plugin/guicolorscheme.vim"))
" Use the guicolorscheme plugin to makes 256-color or 88-color
" terminal use GUI colors rather than cterm colors.
"  runtime plugin/guicolorscheme.vim
"GuiColorScheme darkspectrum2
"  GuiColorScheme railscasts2
"else
" For 8-color 16-color terminals or for gvim, just use the
" regular :colorscheme command.
set background=dark
if has('gui_running')
  colorscheme jellybeans
else
  "let g:solarized_termcolors=256
  let g:solarized_termtrans=1
  colors solarized
endif

"folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default

" GUI Settings {
" GVIM- (here instead of .gvimrc)
if has('gui_running')
  set guioptions-=T           " remove the toolbar
  set lines=40                " 40 lines of text instead of 24,
else
  "set term=xterm       " Make arrow and other keys work
endif
" }

" NERDtree map
silent! nmap <silent> <Leader>p :NERDTreeToggle<CR>
silent! nmap <silent> <Leader>o :NERDTreeFind<CR>

"Ctrlp buffer
nnoremap <leader>b :CtrlPBuffer<cr>
nnoremap <leader>t :CtrlPTag<cr>
nnoremap <leader>f :CtrlP<cr>

"mark syntax errors with :signs
let g:syntastic_enable_signs=1

" Removing backup clutter
set backupdir=~/.vim/backup,/tmp
set dir=~/.vim/backup,/tmp

" Slim and Tmux
let g:slime_target = "tmux"

" Numbers.vim
nnoremap <F3> :NumbersToggle<CR>

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Rainbown parentheses 4evah
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
" We need to reset parentheses when we change the color
au ColorScheme * RainbowParenthesesToggle
au ColorScheme * RainbowParenthesesToggle

"Paredit for el
au BufNewFile,BufRead *.el call PareditInitBuffer()
au BufNewFile,BufRead *.ls call PareditInitBuffer()

"Tagbar
nnoremap <leader>n :TagbarToggle<cr>
let g:tagbar_type_ruby = {
      \ 'kinds' : [
      \ 'm:modules',
      \ 'c:classes',
      \ 'd:describes',
      \ 'C:contexts',
      \ 'f:methods',
      \ 'F:singleton methods'
      \ ]
      \ }
let g:tagbar_type_clojure = {
      \ 'ctagstype': 'clojure',
      \ 'kinds' : [
      \ 'n:namespace' ,
      \ 'd:definition' ,
      \ 'f:function' ,
      \ 'm:macro' ,
      \ 'i:inline' ,
      \ 'a:multimethod definition' ,
      \ 'b:multimethod implementation' ,
      \ 'c:defonce' ,
      \ 's:struct' ,
      \ 'v:intern' ,
      \]
      \ }
