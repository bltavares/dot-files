set encoding=utf-8

" Enforce leader to be the default
let mapleader = "\\"
let maplocalleader = mapleader

set nocompatible  " Use vim defaults instead of VI ones

call plug#begin()
Plug 'altercation/vim-colors-solarized'
Plug 'bling/vim-airline'
Plug 'duganchen/vim-soy', { 'for': 'soy' }
Plug 'godlygeek/Tabular', { 'on': 'Tabularize' }
Plug 'jpalardy/vim-slime'
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
Plug 'kien/ctrlp.vim'
Plug 'kien/rainbow_parentheses.vim'
Plug 'majutsushi/tagbar'
Plug 'myusuf3/numbers.vim'
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'rodjek/vim-puppet', { 'for': 'puppet' }
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree', { 'on': ['NERDtree', 'NERDTreeFind', 'NERDTreeToggle'] }
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-markdown', { 'for': 'markdown' }
Plug 'tpope/vim-surround'
Plug 'vim-scripts/paredit.vim'
Plug 'wting/rust.vim', { 'for': 'rust' }
call plug#end()

set autoindent     " Automatic indent text while creating new lines
set autowrite      " Writes on make/shell commands
set confirm        " Prompt for options when the buffer is unread for unsafe operations
set hidden         " Allow buffers to go to background without saving
set history=256    " Number of things to remember in history.
set hlsearch       " hilight searches by default
set incsearch      " find the next match as we type the search
set laststatus=2   " Always show status line
set nowrap         " Don't wrap lines
set number         " Line numbers on
set relativenumber " Display lines relative to your current line
set ruler          " Display the percentage of your current location given the size of the file
set showcmd        " show incomplete commands on the bottom right
set showmode       " show current mode on bottm left
set timeoutlen=500 " Time to wait after ESC (default causes an annoying delay)

set backupdir=~/.vim/backup,/tmp " Store backup out of the current folder
set directory=~/.vim/backup,/tmp "Store the swap ouf of the current folder

set noerrorbells  " Don't blink screen on errors
set novisualbell  " Don't blink the screen

set backspace=indent,eol,start " Backspace over auto indentation, back a line and to the begining of insert
set expandtab                  " Use spaces instead of tabs to insert tabs
set shiftwidth=2               " Tabs under smart indent
set smarttab                   " When tab, insert blanks according to shiftwidth
set tabstop=2                  " Tabs are 2 spaces

set list        " Display hidden text according to listchars
set showbreak=â†ª " Character to display on te begining of a wrapped line
set showmatch   " Show matching brackets.
set listchars=tab:\ \ ,eol:$,trail:~,extends:>,precedes:<

if has("wildmenu")
  set wildmenu                   " Cycle through command autocompletion options
  set wildmode=longest:full,full " Start wildmenu with the longest, then the next full match
endif

if has('gui_running')
  set lines=40      " Start the window with 40 lines
  set guioptions-=T " remove the toolbar
endif


set mouse=a   " Enable mouse
set mousehide " Hide mouse after chars typed

set background=dark
colors solarized

set foldmethod=indent " fold based on indent
set foldnestmax=3     " Maximum nested folds
set nofoldenable      " dont fold by default

" alt+n or alt+p to navigate between entries in QuickFix
map <silent> <m-p> :cp <cr>
map <silent> <m-n> :cn <cr>

" NERDtree map
silent! nmap <silent> <Leader>p :NERDTreeToggle<CR>
silent! nmap <silent> <Leader>o :NERDTreeFind<CR>

" Ctrlp buffer
let g:ctrlp_max_files = 0
nnoremap <leader>b :CtrlPBuffer<cr>
nnoremap <leader>t :CtrlPTag<cr>
nnoremap <leader>f :CtrlP<cr>

" Mark syntax errors with :signs
let g:syntastic_enable_signs=1

" Slim and Tmux
let g:slime_target = "tmux"

" Numbers.vim
nnoremap <F3> :NumbersToggle<CR>

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Rainbown parentheses 4evah
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

"Paredit for el
au BufNewFile,BufRead *.el call PareditInitBuffer()
au BufNewFile,BufRead *.ls call PareditInitBuffer()

" airline
let g:airline_left_sep='|'
let g:airline_right_sep='|'

" Javascript
let g:javascript_ignore_javaScriptdoc=1

"Tagbar
nnoremap <leader>n :TagbarToggle<cr>
let g:tagbar_type_ruby = {
      \ 'kinds' : [
      \ 'm:modules',
      \ 'c:classes',
      \ 'd:describes',
      \ 'C:contexts',
      \ 'f:methods',
      \ 'F:singleton methods'
      \ ]
      \ }
let g:tagbar_type_clojure = {
      \ 'ctagstype': 'clojure',
      \ 'kinds' : [
      \ 'n:namespace' ,
      \ 'd:definition' ,
      \ 'f:function' ,
      \ 'm:macro' ,
      \ 'i:inline' ,
      \ 'a:multimethod definition' ,
      \ 'b:multimethod implementation' ,
      \ 'c:defonce' ,
      \ 's:struct' ,
      \ 'v:intern' ,
      \]
      \ }
let g:tagbar_type_puppet = {
      \ 'ctagstype': 'puppet',
      \ 'kinds': [
      \'c:class',
      \'s:site',
      \'n:node',
      \'d:definition'
      \]
      \}
let g:tagbar_type_markdown = {
      \ 'ctagstype' : 'markdown',
      \ 'kinds' : [
      \ 'h:Heading_L1',
      \ 'i:Heading_L2',
      \ 'k:Heading_L3'
      \ ]
      \ }
